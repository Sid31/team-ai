type ChatMessage = record { content : text; role : text };
type ComputationResult = record {
  insights : text;
  timestamp : nat64;
  privacy_proof : text;
};
type LLMQueryRequest = record {
  id : text;
  status : QueryStatus;
  result : opt text;
  requester : principal;
  received_signatures : vec principal;
  "query" : text;
  created_at : nat64;
  target_datasets : vec text;
  required_signatures : vec principal;
  expires_at : nat64;
};
type MPCComputation = record {
  id : text;
  status : text;
  required_parties : nat32;
  title : text;
  requester : principal;
  vetkey_derivation_complete : bool;
  votes : vec Vote;
  received_signatures : vec principal;
  description : text;
  created_at : nat64;
  results : opt text;
  signature_id : opt text;
  required_signatures : vec principal;
  approvals : vec principal;
};
type PartyInfo = record {
  "principal" : principal;
  name : text;
  role : text;
  last_seen : nat64;
  is_active : bool;
  vetkey_id : text;
};
type PrivateDataSource = record {
  id : text;
  encrypted_data : blob;
  owner : principal;
  schema : text;
  name : text;
  created_at : nat64;
  access_permissions : vec principal;
  party_name : text;
  vetkey_id : text;
  record_count : nat32;
};
type QueryStatus = variant {
  Executing;
  Approved;
  Rejected;
  Completed;
  Expired;
  Pending;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : blob; Err : text };
type Result_2 = variant { Ok : ComputationResult; Err : text };
type Result_3 = variant { Ok : MPCComputation; Err : text };
type VetkdEncryptedKeyResponse = variant { Ok : blob; Err : text };
type VetkdPublicKeyResponse = variant { Ok : blob; Err : text };
type Vote = record { decision : text; voter : principal; timestamp : nat64 };
service : () -> {
  chat : (vec ChatMessage) -> (text);
  create_computation_request : (text, text) -> (Result);
  create_llm_query : (text, vec text) -> (Result);
  derive_agent_encryption_key : (text) -> (Result_1);
  execute_computation_request : (text) -> (Result);
  execute_llm_query : (text) -> (Result);
  execute_secure_mpc_computation : (text, text, vec text) -> (Result_2);
  generate_privacy_proof : (text) -> (Result);
  get_all_computation_requests : () -> (vec MPCComputation) query;
  get_all_data_sources : () -> (vec PrivateDataSource) query;
  get_all_datasets : () -> (vec PrivateDataSource) query;
  get_computation_request : (text) -> (Result_3) query;
  get_data_sources_for_user : () -> (vec PrivateDataSource) query;
  get_llm_queries : () -> (vec LLMQueryRequest) query;
  get_pending_queries_for_user : () -> (vec LLMQueryRequest) query;
  get_query_by_id : (text) -> (opt LLMQueryRequest) query;
  get_registered_parties : () -> (vec PartyInfo) query;
  get_user_identity : () -> (Result) query;
  prompt : (text) -> (text);
  register_party : (text, text) -> (Result);
  register_user_identity : (text, text) -> (Result);
  save_computation_results : (text, text) -> (Result);
  secure_agent_communication : (text, text, blob) -> (Result_1);
  sign_llm_query : (text) -> (Result);
  upload_encrypted_dataset : (text, blob, text, nat32) -> (Result);
  upload_private_data : (text, blob, text) -> (Result);
  vetkd_encrypted_key : (blob, blob) -> (VetkdEncryptedKeyResponse);
  vetkd_public_key : () -> (VetkdPublicKeyResponse);
  vote_on_computation_request : (text, text) -> (Result);
}
